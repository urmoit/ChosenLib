plugins {
    id 'fabric-loom' version "1.6.12"
    id 'maven-publish'
    id 'java-library'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.1.17'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        url 'https://maven.fabricmc.net/'
    }
    mavenCentral()
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "chosenlib" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    // Enable faster build times (optional)
    runs {
        client {
            programArgs("--quickPlaySingleplayer", "test")
            programArgs("--width", "1280")
            programArgs("--height", "720")
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
            exclude '.cache', '**/.DS_Store'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Add these for better compatibility
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}


processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version
    }
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 21
    options.compilerArgs += ["-Xlint:deprecation"]
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}"}
    }
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
}

// ---------------------------
// Publishing to Modrinth
// ---------------------------
def hasModrinthCreds = System.getenv('MODRINTH_TOKEN') && project.findProperty('modrinth_project_id')
if (hasModrinthCreds) {
    modrinth {
        token = System.getenv('MODRINTH_TOKEN')
        projectId = project.findProperty('modrinth_project_id')
        versionNumber = project.version
        versionType = project.findProperty('release_type') ?: 'release'
        uploadFile = tasks.remapJar
        gameVersions = [ project.minecraft_version ]
        loaders = [ 'fabric' ]
        changelog = project.findProperty('changelog') ?: 'See changelog on repository.'

        dependencies {
            required.project 'fabric-api'
        }
    }
    tasks.modrinth.dependsOn tasks.remapJar
}

// ---------------------------
// Publishing to CurseForge
// ---------------------------
def hasCurseCreds = System.getenv('CURSEFORGE_TOKEN') && project.findProperty('curseforge_project_id')
if (hasCurseCreds) {
    task curseforgeUpload(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        apiToken = System.getenv('CURSEFORGE_TOKEN')

        def projId = project.findProperty('curseforge_project_id')
        def mainFile = upload(projId, tasks.remapJar.archiveFile)
        mainFile.displayName = "${project.archives_base_name} ${project.version}"
        mainFile.releaseType = (project.findProperty('release_type') ?: 'release')
        mainFile.addGameVersion project.minecraft_version
        mainFile.addModLoader 'Fabric'
        mainFile.changelog = project.findProperty('changelog') ?: 'See changelog on repository.'
        mainFile.addRequirement 'fabric-api'
    }
    curseforgeUpload.dependsOn tasks.remapJar
} else {
    tasks.register('curseforgeUpload') {
        doLast {
            println 'Skipping CurseForge upload: set CURSEFORGE_TOKEN and curseforge_project_id first.'
        }
    }
}

// Fix publishing configuration
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.archives_base_name
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.archives_base_name
                description = 'A Fabric mod library'
                url = 'https://github.com/yourusername/yourmod'
                licenses {
                    license {
                        name = 'CC0-1.0'
                        url = 'https://creativecommons.org/publicdomain/zero/1.0/'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = 'local'
            url = layout.buildDirectory.dir('repo')
        }
    }
}

// Add task to generate problems report
tasks.register('problemsReport') {
    doLast {
        println "Problems report available at: build/reports/problems/problems-report.html"
    }
}

// Configure build to be more verbose with warnings
gradle.projectsEvaluated {
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}